class Solution {
public:
    int largestRectangleArea(vector<int>& heights) {

        int n = heights.size();
        vector<int> ple(n) , nle(n);

        stack<int> st;
    
        // Find Previous Less Element (PLE)
        for (int i = 0; i < n; ++i) {
            while (!st.empty() && heights[st.top()] >= heights[i]) {
                st.pop();
            }
            ple[i] = st.empty() ? -1 : st.top();
            st.push(i);
        }

        // Clear the stack for the next use
        while (!st.empty()) {
            st.pop();
        }

        // Find Next Less Element (NLE)
        for (int i = n - 1; i >= 0; --i) {
            while (!st.empty() && heights[st.top()] > heights[i]) {
                st.pop();
            }
            nle[i] = st.empty() ? n : st.top();
            st.push(i);
        }

        int ans = INT_MIN;

        for(int i=0;i<n;i++)
        {
           ans = max(ans , heights[i]*(nle[i]-ple[i]-1));
        }

        return ans;
    }
};
