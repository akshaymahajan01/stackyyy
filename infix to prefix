#include<bits/stdc++.h>

using namespace std;


int prec(char c) {
  if (c == '^')
    return 3;                                   /// same as infix to postfix just chnages the for loop for right to left and reverse the result then also precedence  (same < same) this now ///
  else if (c == '/' || c == '*')
    return 2;
  else if (c == '+' || c == '-')
    return 1;
  else
    return -1;
}


void infixToPrefix(string s) {

  stack < char > st; 
  string result;

  for (int i = s.length()-1; i >=0; i--) {
    char c = s[i];

    
    if ((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z') || (c >= '0' && c <= '9'))
      result += c;

    
    else if (c == ')')
      st.push(')');

    
    else if (c == '(') {
      while (st.top() != ')') {
        result += st.top();
        st.pop();
      }
      st.pop();
    }

    
    else {
      while (!st.empty() && prec(s[i]) < prec(st.top())) {
        result += st.top();
        st.pop();
      }
      st.push(c);
    }
  }

  
  while (!st.empty()) {
    result += st.top();
    st.pop();
  }
 

  reverse(result.begin(), result.end());

  cout << "Prefix expression: " << result << endl;
}

int main() {
  string s = ("((a/(b-c+d))*(e-a)*c)");
  cout << "Infix expression: " << s << endl;
  infixToPrefix(s);
  return 0;
}
